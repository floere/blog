---
layout: post
title: Why&nbsp;I&nbsp;don't&nbsp;use&nbsp;round&nbsp;brackets
categories:
  - ruby
  - programming
---
This is a blog post for once NOT ABOUT PICKY! :D So enjoy the tentacle-free space.

Let me be blunt: I really don't like reading Ruby code that uses a lot of round brackets.

No, let me be blunter: I hate reading code that uses a lot of round brackets.

Actually, it's like this: *Round brackets are the training wheels of a Ruby coder. They might be useful in the beginning, but at some point they should come off!*

But let me be less contrarian and just show you why I don't use them anymoreâ€¦

h2. Weaning yourself off the training wheels

There's a few good reasons why I don't use round brackets anymore.

h3. Less noise

Brackets introduce visual noise. Compare and contrast these two method signatures:

<pre class="ruby"><code>def extract_from(text)</code></pre>

with

<pre class="ruby"><code>def extract_from text</code></pre>

What do you gain by introducing brackets? Would you gain something by introducing them into text?

<pre class="ruby"><code>My name is(Florian Hanke)</code></pre>

If you think this text example has nothing to do with code then we have different views on code readability. It's more legible to me.

h3. Law of Demeter

You've probably heard of the "Law of Demeter":http://en.wikipedia.org/wiki/Law_of_Demeter? If you haven't, please read about it :)

Not wanting to use round brackets introduces a strain every time I am about to break the Law of Demeter.

Consider this code:

<pre class="ruby"><code>text = extract other_text</code></pre>

Now, if I wanted to call another method on the result, I'd have to write this:

<pre class="ruby"><code>text = extract(other_text).process</code></pre>

Spotting violations is easy for me. I just look for the brackets. If I see brackets in my code, I instantly know that they are there for a good reason and that I actually had a reason to break the Law of Demeter.

Code like

<pre class="ruby"><code>a.b(c).d(e).f</code></pre>

is simply impossible for me, and that's a good thing!

h3. Typing

This is not about typing speed. It is simply about comfort. The comfort of not having to do bracket acrobatics (TM).

Not using brackets lets you type as if the code was free text.

As opposed to e.g. JavaScript, Ruby actually lets you do this, so take advantage.

h3. Being explicit about no parameters

Two small counterpoints.

I use Rspec. Chances are, you use it as well.

There's an expression that goes like this:

<pre class="ruby"><code>thing.should_receive(:some_method).once.with</code></pre>

It's a fluid interface, so using parentheses is ok for me. One of the exceptions. However, I even add them explicitly to tell the future me that I really don't expect any parameters:

<pre class="ruby"><code>thing.should_receive(:some_method).once.with()</code></pre>

Equals "with nothing".

Another exception is the "gobbler" * argument to a method, where Ruby needs brackets to know what it is looking at.

<pre class="ruby"><code>def try(*) end</code></pre>

h3. But I'm used to it!

Yes, and you're also trained on QWERTY. Doesn't mean it was a good idea.

h3. But, but, I need to help Ruby with reading my code!

Please. You're probably the first to cheer when the robot overlords arrive.

h3. Conclusion

It's a good idea to be sceptical.

I simply asked myself: Why am I actually using brackets when they are not needed?

I couldn't think of good reasons, while I was able to find some reasons against using brackets.

Hence, no brackets.

WDYT?