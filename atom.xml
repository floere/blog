<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>code is code</title>
 <link href="http://floere.github.com/blog/atom.xml" rel="self"/>
 <link href="http://floere.github.com/blog/"/>
 <updated>2011-01-20T11:41:22+01:00</updated>
 <id>http://floere.github.com/blog/</id>
 <author>
   <name>Florian Hanke</name>
   <email>florian.hanke@gmail.com</email>
 </author>

 
 <entry>
   <title>Searching with Picky&#58; Data Sources</title>
   <link href="http://blog.absurd.li/2011/01/20/searching-with-picky-data-sources.html"/>
   <updated>2011-01-20T00:00:00+01:00</updated>
   <id>http://floere.github.com/blog/2011/01/20/searching-with-picky-data-sources</id>
   <content type="html">&lt;p&gt;This is a post in the &lt;a href=&quot;http://florianhanke.com/picky/index.html&quot;&gt;Picky&lt;/a&gt; series on its configuration. If you haven&amp;#8217;t tried it yet, do so in the &lt;a href=&quot;http://florianhanke.com/picky/getting_started.html&quot;&gt;Getting Started&lt;/a&gt; section. It&amp;#8217;s quick and painless :)&lt;/p&gt;
&lt;h2&gt;What is a Data Source in Picky?&lt;/h2&gt;
&lt;p&gt;A data source is where the indexes get their data. Every index needs a data source.&lt;/p&gt;
&lt;p&gt;The way to do this is pass the &lt;code&gt;index(identifier, source)&lt;/code&gt; method&amp;#8217;s source param a source instance, like so (in &lt;code&gt;app/application.rb&lt;/code&gt;):
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;books_index = index :books, Sources::DB.new('SELECT id, title, author FROM books', file: 'app/db.yml')&lt;/code&gt;&lt;/pre&gt;
Here we passed a database source that uses a simple select. Which database the source uses is defined in the file &lt;code&gt;app/db.yml&lt;/code&gt; and follows the configuration structure of Active Record. You could, instead of passing in a &lt;code&gt;file&lt;/code&gt; option, just pass in the Active Record config hash.&lt;/p&gt;
&lt;p&gt;There are various data sources already defined beside the DB source (see below), but if the one you need is missing, writing your own is easy.&lt;/p&gt;
&lt;p&gt;After that comes the most important part in Picky! :) No, really. Because what we are now going to do is categorize the data we got from the source.&lt;/p&gt;
&lt;p&gt;Categorizing the data is so important, because it allows Picky to make guesses as to which category a query word is in and get better feedback from the user. Say, if you categorized both first name and last name in the category &lt;code&gt;name&lt;/code&gt;, Picky would not be able to help your users find what you are looking for, since it can&amp;#8217;t ask back specifically what you mean, like &amp;#8220;Did you mean Florian as first name or last name?&amp;#8221;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s best if you just &lt;a href=&quot;http://florianhanke.com/picky/getting_started.html&quot;&gt;get started&lt;/a&gt;, and see for yourself. Picky is best experienced, and not told.&lt;/p&gt;
&lt;p&gt;Back to the example: Now that we have defined a data source, it&amp;#8217;s easy to define a category on it. If you define a &lt;code&gt;title&lt;/code&gt; category
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;books_index.define_category :title&lt;/code&gt;&lt;/pre&gt;
it will use whatever data came back from the database.&lt;/p&gt;
&lt;p&gt;If your database doesn&amp;#8217;t have nice column names, don&amp;#8217;t worry, you have two options:
Do a &lt;code&gt;SELECT id, t_01 as title ...&lt;/code&gt; or use the &lt;code&gt;from&lt;/code&gt; option when you define the category:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;books_index.define_category :title, :from =&amp;gt; :t_01&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;from&lt;/code&gt; option is quite cool, as it allows you to have multiple categories on the same data! Say you wanted a similarity search in one category and none on the other:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;books_index.define_category :title, :from =&amp;gt; :t_01
books_index.define_category :similar_title, :from =&amp;gt; :t_01, similarity: Similarity::Phonetic.new(3)&lt;/code&gt;&lt;/pre&gt;
Lots of possibilities, I&amp;#8217;m sure you&amp;#8217;ll find more useful ones!&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s more. You can have crazy indexes where every category has its own data source:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;books_index.define_category :title, source: Sources::CSV.new(:title, :author, file: 'data/library.csv', col_sep: ',')&lt;/code&gt;&lt;/pre&gt;
Now the title category takes its data from a library.csv. If you do this, be careful that all data sources use the same ids or Picky&amp;#8217;s core mechanism won&amp;#8217;t work.&lt;/p&gt;
&lt;h2&gt;Currently available data sources&lt;/h2&gt;
&lt;p&gt;Picky offers a few data sources, &lt;code&gt;DB&lt;/code&gt; for databases, &lt;code&gt;CSV&lt;/code&gt; for comma-separated files, &lt;code&gt;Couch&lt;/code&gt; for couch DB, and &lt;code&gt;Delicious&lt;/code&gt;, for delicious bookmarks. Mmh.&lt;/p&gt;
&lt;p&gt;This is how you use them. We&amp;#8217;ve already seen the database source:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;Sources::DB.new('SELECT id, title, author FROM books', file: 'app/db.yml')&lt;/code&gt;&lt;/pre&gt;
Don&amp;#8217;t hesitate to use JOINs or other &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; expressions for some extreme databasing!
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;Sources::CSV.new(:title, :author, :isbn, :year, :publisher, :subjects, file: 'data/books.csv')&lt;/code&gt;&lt;/pre&gt;
This source assumes that your first column is the id column. It takes its data from the file given in the &lt;code&gt;file&lt;/code&gt; option.
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;Sources::Couch.new(:title, :author, :isbn, url: 'http://localhost:5984/picky', keys: Sources::Couch::UUIDKeys.new)&lt;/code&gt;&lt;/pre&gt;
The CouchDB source takes a url where couch DB serves its data. By default it assumes that you are using Hex Keys. But you can pass in one of &lt;code&gt;Sources::Couch::HexKeys.new&lt;/code&gt;, &lt;code&gt;Sources::Couch::UUIDKeys.new&lt;/code&gt;, or &lt;code&gt;Sources::Couch::IntegerKeys.new&lt;/code&gt; in the &lt;code&gt;keys&lt;/code&gt; option to tell Picky what keys you have.
I&amp;#8217;m afraid that currently you have to recalculate your keys in the client to get back the original keys. I am working on non-integer keys, but it takes its time. Sorry about that.
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;Sources::Delicious.new(:username, :password)&lt;/code&gt;&lt;/pre&gt;
Delicious is the easiest source, since it comes with fixed data categories &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt; that you can categorize.&lt;/p&gt;
&lt;h2&gt;How do I define my own Data Source?&lt;/h2&gt;
&lt;p&gt;Defining your own source is easy. The Couch DB source for example has actually been sent in by &lt;a href=&quot;http://github.com/stanley&quot;&gt;Stanley&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This piece of code is the superclass of all sources in Picky and is there simply for illustrative purposes, so you can see what methods should be implemented:
&lt;a href=&quot;http://github.com/floere/picky/blob/master/server/lib/picky/sources/base.rb&quot;&gt;http://github.com/floere/picky/blob/master/server/lib/picky/sources/base.rb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recommend to make your source also its subclass, since it implements empty methods that are called by the indexer. But it actually just needs one worker method. This one:
&lt;code&gt;harvest(index, category)&lt;/code&gt;
It gets the index and the current category and should &lt;code&gt;yield(id, text_data_for_id)&lt;/code&gt;. It is called by the indexer when it needs the data.&lt;/p&gt;
&lt;p&gt;The two other methods that are called by the indexer are
&lt;code&gt;connect_backend&lt;/code&gt;, which is called once per index/category, and &lt;code&gt;take_snapshot&lt;/code&gt;, which is called once for each index, before &lt;code&gt;harvest&lt;/code&gt;-ing the data. Use it to create temporary tables etc.&lt;/p&gt;
&lt;p&gt;So if your duck subclasses &lt;code&gt;Sources::Base&lt;/code&gt;, quacks &lt;code&gt;#harvest&lt;/code&gt; and yields &lt;code&gt;id, text_data_for_id&lt;/code&gt; your data source is set to go!&lt;/p&gt;
&lt;p&gt;Simple and easy to understand, isn&amp;#8217;t it?&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So we&amp;#8217;ve seen&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;what a data source in Picky is.&lt;/li&gt;
	&lt;li&gt;what data sources are currently available.&lt;/li&gt;
	&lt;li&gt;how you write your own.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope you learnt something new :)&lt;/p&gt;
&lt;h2&gt;Contributing one to Picky&lt;/h2&gt;
&lt;p&gt;If you write your own data source, please let me know!&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Searching with Picky&#58; Partial Search</title>
   <link href="http://blog.absurd.li/2011/01/17/searching-with-picky-partial-search.html"/>
   <updated>2011-01-17T00:00:00+01:00</updated>
   <id>http://floere.github.com/blog/2011/01/17/searching-with-picky-partial-search</id>
   <content type="html">&lt;p&gt;This is a post in the &lt;a href=&quot;http://florianhanke.com/picky/index.html&quot;&gt;Picky&lt;/a&gt; series on its configuration. If you haven&amp;#8217;t tried it yet, do so in the &lt;a href=&quot;http://florianhanke.com/picky/getting_started.html&quot;&gt;Getting Started&lt;/a&gt; section. It&amp;#8217;s quick and painless :)&lt;/p&gt;
&lt;h2&gt;What is a Partial Search?&lt;/h2&gt;
&lt;p&gt;Partial searching is when the user only enters part of a query word, but the search engine still manages to find the whole word.&lt;/p&gt;
&lt;p&gt;Example:
We want to find all &lt;code&gt;chunky bacon&lt;/code&gt;. If the search engine supports a partial search, we should be able to search for just &lt;code&gt;chunky ba&lt;/code&gt; and &lt;code&gt;chunky bacon&lt;/code&gt; will still be found.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;chunky bards&lt;/code&gt; will also be found, and so will &lt;code&gt;chunky babes&lt;/code&gt;. So beware.&lt;/p&gt;
&lt;p&gt;Usually, the character used for partial searches is the asterisk, &lt;code&gt;*&lt;/code&gt;.
So you would search for &lt;code&gt;chunky ba*&lt;/code&gt; to have the search engine look for &lt;code&gt;ba&lt;/code&gt; followed by anything.&lt;/p&gt;
&lt;h2&gt;In Picky&lt;/h2&gt;
&lt;p&gt;At the time of writing, Picky offers a postfix partial search, meaning that only words &lt;em&gt;ending&lt;/em&gt; in anything can be searched. (Or a &lt;code&gt;Partial::None&lt;/code&gt; partial search that just ignores the &lt;code&gt;*&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;The thing you use is &lt;code&gt;Partial::Substring&lt;/code&gt;, like this:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;some_index = index :main, Sources::DB.new('SELECT id, title FROM books', file: 'app/db.yml')
some_index.define_category :title, partial: Partial::Substring.new(from: 1)&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;So you define a data category on the index and give it the &lt;code&gt;partial&lt;/code&gt; option. With this option you tell Picky to use the following class for generating the index in a special way to support partial indexing and querying.&lt;/p&gt;
&lt;p&gt;What we want in the example above is have Picky use a &lt;code&gt;Partial::Substring&lt;/code&gt;, and have a query word match &lt;code&gt;from&lt;/code&gt; the first position (position &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Example:
A word like &lt;code&gt;picky&lt;/code&gt; would match on &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;pi&lt;/code&gt;, &lt;code&gt;pic&lt;/code&gt;, &lt;code&gt;pick&lt;/code&gt; and &lt;code&gt;picky&lt;/code&gt;. If you defined &lt;code&gt;from: 3&lt;/code&gt;, then it would only match &lt;code&gt;pic&lt;/code&gt;, &lt;code&gt;pick&lt;/code&gt;, &lt;code&gt;picky&lt;/code&gt;. Setting &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; is indexing intensive, but will find everything.&lt;/p&gt;
&lt;p&gt;It is super-easy to write your own partial search. See below for that. The sky is the limit, basically.&lt;/p&gt;
&lt;p&gt;On a side-note: Picky will always search the last word of a query with a &lt;code&gt;*&lt;/code&gt;, except if you use double quotes, like so: &lt;code&gt;&quot;chunky bac&quot;&lt;/code&gt;. This will really only find &lt;code&gt;chunky bac&lt;/code&gt;, not &lt;code&gt;chunky bacon&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;How does Picky do this?&lt;/h2&gt;
&lt;p&gt;Picky aims to be very extensible, so what it does is very simple.&lt;/p&gt;
&lt;p&gt;Picky uses a partial generator, like &lt;code&gt;Partial::Substring&lt;/code&gt; which takes an exact index (more below) and returns a partial index.&lt;/p&gt;
&lt;p&gt;An exact index in Picky is just a hash that maps words to an array of ids.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;Partial::Substring.new(from: 3)&lt;/code&gt; takes something like that:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;{
  :picky =&amp;gt; [1, 16, 3, 999],
  :pickle =&amp;gt; [800, 3, 55]
}
&lt;/code&gt;&lt;/pre&gt;
(the index for exact matches) and transforms it into something like that:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;{
  :pickle =&amp;gt; [800, 3, 55],
  :pickl  =&amp;gt; [800, 3, 55],
  :picky =&amp;gt; [1, 16, 3, 999],
  :pick  =&amp;gt; [1, 16, 3, 999, 800, 3, 55],
  :pic  =&amp;gt; [1, 16, 3, 999, 800, 3, 55]
}
&lt;/code&gt;&lt;/pre&gt;
So in &lt;code&gt;pic&lt;/code&gt;, there are both the ids from &lt;code&gt;picky&lt;/code&gt; and the ids from &lt;code&gt;pickle&lt;/code&gt;. If someone looks for &lt;code&gt;pic&lt;/code&gt;, we return a mix of both ids.&lt;/p&gt;
&lt;h2&gt;How do I define my own Partial Search?&lt;/h2&gt;
&lt;p&gt;It is extremely simple. A partial search just needs to implement a &lt;code&gt;generate_from(exact_index)&lt;/code&gt; method that returns the new partial index.&lt;/p&gt;
&lt;p&gt;You could for example implement a partial index that has &lt;em&gt;random&lt;/em&gt; substring matches of up to 3 characters (silly, I know :)):
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;class Partial::Random
  def generate_from exact_index
    exact_index.inject({}) do |partial_index, word_and_ids|
      word, ids = *word_and_ids
      start  = rand word.size
      ending = rand(3) + 1
      random_substring = word[start, ending]
      partial_index[random_substring] ||= []
      partial_index[random_substring] += ids
      partial_index
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
This method returns a new index that might look like this:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;Partial::Random.new.generate_from(:picky =&amp;gt; [1,2,3]) # =&amp;gt; { :ick =&amp;gt; [1,2,3] }
&lt;/code&gt;&lt;/pre&gt;
Of course, the example is not very performant – but legible for you.&lt;/p&gt;
&lt;p&gt;Finally, you&amp;#8217;d use it for your data categories in &lt;code&gt;app/application.rb&lt;/code&gt; like this:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;some_index = index :main, Sources::DB.new('SELECT id, title FROM books', file: 'app/db.yml')
some_index.define_category :title, partial: Partial::Random.new
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;A better idea might be to create a substring partial that generates a partial index where the asterisk is actually at the front of the word:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;{
  :picky =&amp;gt; [1,2,3],
  :icky  =&amp;gt; [1,2,3],
  :cky   =&amp;gt; [1,2,3],
  :ky    =&amp;gt; [1,2,3],
  :y     =&amp;gt; [1,2,3]
}
&lt;/code&gt;&lt;/pre&gt;
This will match &lt;code&gt;picky&lt;/code&gt; if you enter just a &lt;code&gt;y&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Picky is very flexible – do what you want however you want it.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So we&amp;#8217;ve seen&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;what a partial search is.&lt;/li&gt;
	&lt;li&gt;how Picky does a partial search.&lt;/li&gt;
	&lt;li&gt;how a partial search is configured in Picky.&lt;/li&gt;
	&lt;li&gt;how you can write your own.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope you learnt something new :)&lt;/p&gt;
&lt;h2&gt;Contributing one to Picky&lt;/h2&gt;
&lt;p&gt;If you write your own, please let me know!&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Searching with Picky&#58; Character&nbsp;Substitution</title>
   <link href="http://blog.absurd.li/2011/01/13/searching-with-picky-character-substituters.html"/>
   <updated>2011-01-13T00:00:00+01:00</updated>
   <id>http://floere.github.com/blog/2011/01/13/searching-with-picky-character-substituters</id>
   <content type="html">&lt;p&gt;This is a post in the &lt;a href=&quot;http://florianhanke.com/picky/index.html&quot;&gt;Picky&lt;/a&gt; series on its configuration. If you haven&amp;#8217;t tried it yet, do so in the &lt;a href=&quot;http://florianhanke.com/picky/getting_started.html&quot;&gt;Getting Started&lt;/a&gt; section. It&amp;#8217;s quick and painless :)&lt;/p&gt;
&lt;h2&gt;What is Character Substitution?&lt;/h2&gt;
&lt;p&gt;Character substitution in a search engine is one of the first steps in the process of sanitizing your users&amp;#8217; input.&lt;/p&gt;
&lt;p&gt;Examples:
&lt;code&gt;ä =&amp;gt; ae&lt;/code&gt;,
&lt;code&gt;ø =&amp;gt; o&lt;/code&gt;,
&lt;code&gt;é =&amp;gt; e&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is used to make the search engine indifferent to a user&amp;#8217;s origin or way of writing.&lt;/p&gt;
&lt;p&gt;For example, my hometown is called &lt;code&gt;Zürich&lt;/code&gt;, with an &lt;em&gt;umlaut&lt;/em&gt; character, &lt;code&gt;ü&lt;/code&gt;.
German users will search with an ü. However, most users of the world don&amp;#8217;t know this character, and will simply type &lt;code&gt;Zurich&lt;/code&gt;. So what we want is make the search engine ignore the &lt;em&gt;umlaut diacritics&lt;/em&gt;, the two dots over the u.&lt;/p&gt;
&lt;h2&gt;How do we do this?&lt;/h2&gt;
&lt;p&gt;Usually, what search engines do is perform a sort of &lt;em&gt;character substitution&lt;/em&gt; before putting text into the index, so &lt;code&gt;Zürich&lt;/code&gt; will go into the index as &lt;code&gt;zurich&lt;/code&gt;. For that, we character substituted &lt;code&gt;ü =&amp;gt; u&lt;/code&gt;. I also &lt;em&gt;lowercased&lt;/em&gt; it, since that is what search engines also do, to significantly save index space.&lt;/p&gt;
&lt;p&gt;So now we have &lt;code&gt;Zurich&lt;/code&gt; in the index. If a user now searched for &lt;code&gt;Zürich&lt;/code&gt;, the search engine wouldn&amp;#8217;t find it.&lt;/p&gt;
&lt;p&gt;So what we do is also perform this character substitution in a query, so that if the user enters an &lt;code&gt;ü&lt;/code&gt;, it is replaced by an &lt;code&gt;u&lt;/code&gt;, making &lt;code&gt;Zurich&lt;/code&gt; out of &lt;code&gt;Zürich&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In a nutshell, the indexing and the querying map both &lt;code&gt;Zürich&lt;/code&gt; and &lt;code&gt;Zurich&lt;/code&gt; to &lt;code&gt;Zurich&lt;/code&gt; and a user will find it, regardless if they searched for my hometown with or without umlaut.&lt;/p&gt;
&lt;h2&gt;How do we do this in Picky?&lt;/h2&gt;
&lt;p&gt;Picky offers two class methods in a Picky &lt;code&gt;Application&lt;/code&gt; where you can define how characters are substituted, amongst other things:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;code&gt;default_indexing options = {}&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;default_querying options = {}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;default_&lt;/code&gt; in the method name comes from the fact that whatever options are given, will be used for all indexing and querying unless overridden. So most of the time you will be configuring it there.&lt;/p&gt;
&lt;p&gt;One of the options is &lt;code&gt;substitutes_characters_with&lt;/code&gt; and you give it a character substituter object that has a &lt;code&gt;#substitute(text)&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Picky already includes one for west european character sets. You use it as follows:&lt;/p&gt;
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;default_indexing substitutes_characters_with: CharacterSubstituters::WestEuropean.new&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use the Ruby 1.9 hash style, &lt;code&gt;key: value&lt;/code&gt;, for that. The rocket I use for mapping things, &lt;code&gt;map '/some/path' =&amp;gt; controller&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What the west european character substituter does is this:
&lt;code&gt;ä =&amp;gt; ae&lt;/code&gt;,
&lt;code&gt;Ä =&amp;gt; Ae&lt;/code&gt;,
&lt;code&gt;ë =&amp;gt; e&lt;/code&gt;,
&lt;code&gt;Ë =&amp;gt; E&lt;/code&gt;,
&lt;code&gt;ï =&amp;gt; i&lt;/code&gt;,
&lt;code&gt;Ï =&amp;gt; I&lt;/code&gt;,
&lt;code&gt;ö =&amp;gt; oe&lt;/code&gt;,
&lt;code&gt;Ö =&amp;gt; Oe&lt;/code&gt;,
&lt;code&gt;ü =&amp;gt; ue&lt;/code&gt;,
&lt;code&gt;Ü =&amp;gt; Ue&lt;/code&gt;,
and 22 others. See &lt;a href=&quot;http://github.com/floere/picky/blob/master/server/spec/lib/character_substituters/west_european_spec.rb&quot;&gt;the spec&lt;/a&gt; if you&amp;#8217;d like to know more.&lt;/p&gt;
&lt;p&gt;So a query like &lt;code&gt;Hände Nüsse&lt;/code&gt; will be sanitized to &lt;code&gt;haende nuesse&lt;/code&gt; before being further processed. Again also lowercasing it, since this is usually also done.&lt;/p&gt;
&lt;h2&gt;How do I define my own character substituter?&lt;/h2&gt;
&lt;p&gt;It is extremely simple. A character substituter just needs to implement a &lt;code&gt;substitute(text)&lt;/code&gt; method that returns the substituted text.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;http://github.com/floere/picky/blob/master/server/lib/picky/character_substituters/west_european.rb&quot;&gt;the source of the west european substituter&lt;/a&gt; if you want to see how I did it.&lt;/p&gt;
&lt;p&gt;Why is it so illegibly written?&lt;/p&gt;
&lt;p&gt;It is heavily optimized. Since this method will be called for all indexed data, and for each query, it should be performant.&lt;/p&gt;
&lt;p&gt;The west european spec includes two performance specs for that:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;describe &quot;speed&quot; do
  it &quot;is fast&quot; do
    result = performance_of { @substituter.substitute('ä') }
    result.should &amp;lt; 0.00009
  end
  it &quot;is fast&quot; do
    result = performance_of { @substituter.substitute('abcdefghijklmnopqrstuvwxyz1234567890') }
    result.should &amp;lt; 0.00015
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;performance_of&lt;/code&gt; is used in Picky quite often to maintain performance and notify me should anything get slower. It looks like this:
&lt;pre class=&quot;sh_ruby&quot;&gt;&lt;code&gt;def performance_of &amp;amp;block
  GC.disable
  result = Benchmark.realtime &amp;amp;block
  GC.enable
  result
end
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So we&amp;#8217;ve seen&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;that most search engines need a character substituter.&lt;/li&gt;
	&lt;li&gt;that character substituter help your international users find things.&lt;/li&gt;
	&lt;li&gt;how they are configured in Picky.&lt;/li&gt;
	&lt;li&gt;how you can write your own.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope you learnt something new :)&lt;/p&gt;
&lt;h2&gt;Contributing one to Picky&lt;/h2&gt;
&lt;p&gt;If you write your own, please let me know!&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Speccing methods called in initialize</title>
   <link href="http://blog.absurd.li/2010/10/27/speccing-methods-called-in-initialize.html"/>
   <updated>2010-10-27T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/10/27/speccing-methods-called-in-initialize</id>
   <content type="html">&lt;p&gt;Recently when writing &lt;a href=&quot;http://floere.github.com/picky/&quot;&gt;Picky, the clever small text search engine&lt;/a&gt;, I encountered the following problem: How do I test methods that are called in an initializer?&lt;/p&gt;
&lt;p&gt;(Of course I could call &lt;code&gt;Testee.new&lt;/code&gt; in the spec and then just call the method again. But what if that method sets a state?)&lt;/p&gt;
&lt;p&gt;In code:
&lt;script src=&quot;http://gist.github.com/648878.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Why open sourcing security critical software is important</title>
   <link href="http://blog.absurd.li/2010/10/06/why-open-sourcing-security-critical-software-is-important.html"/>
   <updated>2010-10-06T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/10/06/why-open-sourcing-security-critical-software-is-important</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.freedom-to-tinker.com/blog/jhalderm/hacking-dc-internet-voting-pilot&quot;&gt;Why open sourcing security critical software is important&lt;/a&gt;&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Profiling MySQL Queries</title>
   <link href="http://blog.absurd.li/2010/09/27/in-detail-performance-measurements-for-MySQL.html"/>
   <updated>2010-09-27T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/09/27/in-detail-performance-measurements-for-MySQL</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/tech-resources/articles/using-new-query-profiler.html&quot;&gt;Profiling MySQL Queries&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In-detail performance measurements for MySQL queries.&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Drawing in the browser</title>
   <link href="http://blog.absurd.li/2010/05/22/drawing-in-the-browser.html"/>
   <updated>2010-05-22T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/05/22/drawing-in-the-browser</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://mugtug.com/sketchpad/&amp;amp;hellip&quot;&gt;Drawing in the Browser&lt;/a&gt;;&lt;/a&gt;
&amp;#8230; using HTML5.&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Most important Ruby method 2010</title>
   <link href="http://blog.absurd.li/2010/05/21/most-important-ruby-method.html"/>
   <updated>2010-05-21T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/05/21/most-important-ruby-method</id>
   <content type="html">&lt;p&gt;It&amp;#8217;s &lt;code&gt;squeeze&lt;/code&gt;!
&lt;script src=&quot;http://gist.github.com/408937.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Programming Applied Mathematics</title>
   <link href="http://blog.absurd.li/2010/05/13/programming-applied-mathematics.html"/>
   <updated>2010-05-13T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/05/13/programming-applied-mathematics</id>
   <content type="html">&lt;p&gt;&lt;code&gt;Programming is one of the most difficult branches of applied mathematics / the poorer mathematicians had better remain pure mathematicians.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;– Edsger W. Dijkstra&lt;/p&gt;
&lt;p&gt;(via &lt;a href=&quot;http://fuckyeahcomputerscience.tumblr.com/&quot;&gt;fuckyeahcomputerscience&lt;/a&gt;)&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>New programming jargon</title>
   <link href="http://blog.absurd.li/2010/05/11/new-programming-jargon.html"/>
   <updated>2010-05-11T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/05/11/new-programming-jargon</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.globalnerdy.com/2010/05/09/new-programming-jargon/&quot;&gt;New Programming Jargon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Need to remember Bugfoot and Shrug Report… And especially Duck!&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Fat slows you down</title>
   <link href="http://blog.absurd.li/2010/05/09/fat-slows-you-down.html"/>
   <updated>2010-05-09T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/05/09/fat-slows-you-down</id>
   <content type="html">&lt;p&gt;Fat slows you down.&lt;/p&gt;
&lt;p&gt;If you really need speed in Ruby 1.9, consider this example:
&lt;script src=&quot;http://gist.github.com/395419.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>You already knew that, right? (Assigning with splats)</title>
   <link href="http://blog.absurd.li/2010/04/30/you-already-knew-that-right.html"/>
   <updated>2010-04-30T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/30/you-already-knew-that-right</id>
   <content type="html">&lt;script src=&quot;http://gist.github.com/385121.js&quot;&gt;&lt;/script&gt;&lt;p&gt;Referring to the fact that I want to sleep with the splat operator…&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>97% is as good as a 100%</title>
   <link href="http://blog.absurd.li/2010/04/30/if-you-re-in-a-hurry.html"/>
   <updated>2010-04-30T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/30/if-you-re-in-a-hurry</id>
   <content type="html">&lt;p&gt;&lt;code&gt;If you're in a hurry and you need to pack up your bags and go, 97% is as good as a 100%. The 100% mark does not have the same (show-stopping) magic as 0%, where the difference between 3% and 0% really is important.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;– &lt;a href=&quot;http://www.two-sdg.demon.co.uk/curbralan/papers/minimalism/OmitNeedlessCode.html&quot;&gt;Omit Needless Code&lt;/a&gt;&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>elements.each(*p)</title>
   <link href="http://blog.absurd.li/2010/04/30/elements-each-p.html"/>
   <updated>2010-04-30T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/30/elements-each-p</id>
   <content type="html">&lt;p&gt;I often use&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ary.map(&amp;amp;:upcase)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;instead of&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ary.map { |a| a.upcase }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But what can I do to use the elements as param as in the following code?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ary.each { |a| p a }&lt;/code&gt;&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/385117.js&quot;&gt;&lt;/script&gt;</content>
   
 </entry>
 
 <entry>
   <title>Strategy pattern pattern pattern pattern</title>
   <link href="http://blog.absurd.li/2010/04/29/strategy-pattern-pattern-pattern-pattern.html"/>
   <updated>2010-04-29T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/29/strategy-pattern-pattern-pattern-pattern</id>
   <content type="html">&lt;p&gt;A pattern that I often see cropping up in my &lt;a href=&quot;http://github.com/floere/gosu_extensions&quot;&gt;game framework&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It can be used for configuring subclasses that act according to an order of calls defined in the superclass. How the calls exactly work can be defined in the subclasses (or in an external configuration) using the class methods.&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/383325.js&quot;&gt;&lt;/script&gt;</content>
   
 </entry>
 
 <entry>
   <title>Mastery is a mindset</title>
   <link href="http://blog.absurd.li/2010/04/26/mastery-is-a-mindset.html"/>
   <updated>2010-04-26T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/26/mastery-is-a-mindset</id>
   <content type="html">&lt;p&gt;&lt;code&gt;Mastery is a mindset.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From the book &amp;#8220;Drive&amp;#8221;, by Pink.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d reformulate it as: &amp;#8220;Mastery is neither a question of time, or experience, but a mindset.&amp;#8221;&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Ruby 1.9 params</title>
   <link href="http://blog.absurd.li/2010/04/20/ruby-19-params.html"/>
   <updated>2010-04-20T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/20/ruby-19-params</id>
   <content type="html">&lt;script src=&quot;http://gist.github.com/372372.js&quot;&gt;&lt;/script&gt;</content>
   
 </entry>
 
 <entry>
   <title>Riddle</title>
   <link href="http://blog.absurd.li/2010/04/18/riddle.html"/>
   <updated>2010-04-18T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/18/riddle</id>
   <content type="html">&lt;p&gt;&lt;code&gt;3735928559&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Why is this number unappealing to vegetarians?&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>A hole in the wall</title>
   <link href="http://blog.absurd.li/2010/04/18/a-hole-in-the-wall.html"/>
   <updated>2010-04-18T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/18/a-hole-in-the-wall</id>
   <content type="html">&lt;p&gt;His stool leaned back at a dangerous angle, he displays a pair of jamaica-colored sneakers to the public. Them sticking out of his business hole seems rather odd, considering the sober surroundings of the Niederdorf, or &amp;#8220;nether village&amp;#8221;, as this particular place in Zürich is called.&lt;/p&gt;
&lt;p&gt;Slurping a botanic tea, idly facebooking and tumbling through the depths, no, shallows of the net, waiting for customers. It&amp;#8217;s been that way now for more than a day, and he starts to wonder if the customer specific context ads are just a fluke.&lt;/p&gt;
&lt;p&gt;An abrupt &amp;#8220;Oh hey&amp;#8221; directed his way throws him out of the structural code improvements that have been waiting for him at the back of his mind. &amp;#8220;Hey&amp;#8221;, a burly businessman with slightly high blood pressure &amp;#8211; he surmises from the corona of hair still clinging on – asks: &amp;#8220;Are you the man that types?&amp;#8221;, &amp;#8220;Yes, yes I do, I code.&amp;#8221; &amp;#8220;Oh, code. Yeah, sorry, my bad. Well, look, I need a small program that does a few calculations based on this.&amp;#8221;&lt;/p&gt;
&lt;p&gt;And he whips out a napkin with a few calculations on it, in black lines what looks to be from an eyeliner, or a piece of coal. &amp;#8220;Don&amp;#8217;t mind the looks – how long do you think this takes?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8220;Hmm, well. I think the design might take me a few hours. Then we&amp;#8217;d need to meet again to see if we&amp;#8217;re on the right track. Then I&amp;#8217;ll have to code it, and clean it up a little. Might take me another 2 hours.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8220;For 90 an hour, right?&amp;#8221; &amp;#8220;That&amp;#8217;s right, as advertised.&amp;#8221; &amp;#8220;Ok, well. See you in three.&amp;#8221;&lt;/p&gt;
&lt;p&gt;He rights his stool, leans forward, sketches boxes and lines, boxes and lines, lines and boxes. Then he goes for a quick walk, takes in the morning, letting the cogs turn. Half an hour of showing tourists the view, and a hot chocolate at the riverside. Finally, he plumps down in front of his sleek, metal-clad machine and types.&lt;/p&gt;
&lt;p&gt;What he did was transform the mascara lines into byroliner lines and boxes as a straw where the mind can cling on to, and from there to typed text on a luminescent screen, for him to read and others to understand, finally into the core of the machine, and the zeros and ones people who have no understanding regurgitate so often.&lt;/p&gt;
&lt;p&gt;Entering the formula was pretty straightforward. But there are other things to consider: What is the best user interface for a burly businessman? Will it be used repeatedly? As if on cue, burly biz arrives and asks &amp;#8220;Done yet?&amp;#8221; &amp;#8220;Oh hi.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Back and forth: The customer starts with a lot of questions, have you put this in? He cuts him short, and explains what he will see, his understanding of the formula. There is much going on, but boils down to this: The clearing of misunderstandings. And they get cleared. It must be his happy day, the businessman knows the power of an ad-hoc team, and how it should work, how progress can come from it.&lt;/p&gt;
&lt;p&gt;The discussion dies down, lots of nodding all around, and smiles emerge. A handshake, and both are off – shorty no doubt to a meeting, where money and hand sweat is moved, our coder off to the plane of lines and boxes. A prototype stands, but this is not where it ends. He wants it to be perfect. After all, he is a craftsman, and craft is what defines him. The table might look nice to an outsider, but the craft is inside: The distribution of weight, the structure of the wood: What holds the thing together and doesn&amp;#8217;t make it bend, for year after year.&lt;/p&gt;
&lt;p&gt;Before he cleans up however, there is yoga waiting for him, and another stroll an the riverside. Can it be improved? How? The response comes to him during the most innocent of activities, stroking a cat that has found, purring, a new home around his legs. He leaves the cat slightly shocked behind – but she improves the situation by licking her paw – and runs up the street, repeating and repeating the idea, urging it not to leave his head.&lt;/p&gt;
&lt;p&gt;Panting, he types it in. The tests run, the code checker tool give him a green light. He opens it, it works. Puts it on a stick, wraps it in a package, puts it into a nice box which brandishes his logo – doodled on the back of a napkin by his sister, three years ago – and puts it aside for the customer, due to arrive in an hour.&lt;/p&gt;
&lt;p&gt;And finally. Finally the sneakers rest again on the sill of the hole.&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Oh yeah, Amazon?</title>
   <link href="http://blog.absurd.li/2010/04/14/oh-yeah-amazon-question-mark.html"/>
   <updated>2010-04-14T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/14/oh-yeah-amazon-question-mark</id>
   <content type="html">&lt;p&gt;From the latest Newsletter:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Support for Session Stickiness in Elastic Load Balancing Amazon Elastic MapReduce Introduces Custom Cluster Configuration Option&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;They also have Gurble Blurble Fickleness, introducing Jambawambing Lordle Figuconation Schnorptions.&lt;/p&gt;
&lt;p&gt;At least that&amp;#8217;s what I hear when I read stuff like that.&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>IE didn't get the CSS3 memo?</title>
   <link href="http://blog.absurd.li/2010/04/13/ie-didnt-get-the-css3-memo-question-mark.html"/>
   <updated>2010-04-13T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/13/ie-didnt-get-the-css3-memo-question-mark</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://kimblim.dk/css-tests/selectors/&quot;&gt;IE didn&amp;#8217;t get the CSS3 memo?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or, as is my guess: The code they based the new browsers on was fully untested, totally disorganized, and thus brutally hard to extend. IE9 though, gives one hope.&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Challenged</title>
   <link href="http://blog.absurd.li/2010/04/12/challenged.html"/>
   <updated>2010-04-12T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/12/challenged</id>
   <content type="html">&lt;p&gt;The framework looms in front of you. Clouds cover the gray sky. You plunge in. Full unit test rewrite, nothing is where it was before, but right: The mailbox is in front of the house, the bathtub is finally in the bath, the fridge contains organic food. There is a pot on the fire, full of juicy stuff.&lt;/p&gt;
&lt;p&gt;But you are wearing glasses that let you only see 10 centimeters. You set wild eyes on the integration tests: Guests are entering the house, trying to eat from the toilet, sleeping in the oven, or jumping out of windows. It is fail, fail, fail, wherever you happen to look.&lt;/p&gt;
&lt;p&gt;You are close to despair. Everything is right. Right? You trudge on, teeth gnashing.&lt;/p&gt;
&lt;p&gt;Then, somehow, you adjust the doormat ever so slightly, piece in the last crumb of information. And magically, it just works. Everything. Just. Works. The gargantuan task is finished. For minutes, you revel in the sun&amp;#8217;s rays. The clouds, they never reappear.&lt;/p&gt;
&lt;p&gt;It is done.&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Stuttering Proc</title>
   <link href="http://blog.absurd.li/2010/04/07/stuttering-proc.html"/>
   <updated>2010-04-07T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/07/stuttering-proc</id>
   <content type="html">&lt;script src=&quot;http://gist.github.com/358947.js&quot;&gt;&lt;/script&gt;</content>
   
 </entry>
 
 <entry>
   <title>Reloading a running Ruby application</title>
   <link href="http://blog.absurd.li/2010/04/05/reloading-a-running-ruby-application.html"/>
   <updated>2010-04-05T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/05/reloading-a-running-ruby-application</id>
   <content type="html">&lt;p&gt;Here&amp;#8217;s how I do it:
&lt;script src=&quot;http://gist.github.com/351776.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;</content>
   
 </entry>
 
 <entry>
   <title>Javuby?</title>
   <link href="http://blog.absurd.li/2010/04/05/javuby-question-mark.html"/>
   <updated>2010-04-05T00:00:00+02:00</updated>
   <id>http://floere.github.com/blog/2010/04/05/javuby-question-mark</id>
   <content type="html">&lt;script src=&quot;http://gist.github.com/356227.js&quot;&gt;&lt;/script&gt;</content>
   
 </entry>
 
 
</feed>